{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_3_to_port_4",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "id": "port_4_to_port_1",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_0_to_port_6",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_6_to_port_2",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_7",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_7_to_port_3",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                }
            ],
            "hash": "9ac99685df35e8b2af24ae859ef35880a3358cbb",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 179.99999999999986
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1000,
                    "y": 1000
                },
                "2": {
                    "data": {
                        "action": "block hash",
                        "actionType": "contain",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Carbon Black Response Demo",
                        "connectorConfigs": [
                            "carbon black"
                        ],
                        "connectorId": 170,
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "block_hash_1",
                        "id": "2",
                        "parameters": {
                            "hash": "filtered-data:filter_2:condition_1:playbook_input:hash"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "",
                                "default": "",
                                "field": "hash"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "action",
                    "x": 980,
                    "y": 440
                },
                "3": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "block_hash_1:action_result.status",
                                        "value": "success"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "indicator blocked",
                                "logic": "and"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "filter_1",
                        "id": "3",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "filter",
                    "x": 1040,
                    "y": 700
                },
                "4": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "indicator_tag",
                            "repoName": "community"
                        },
                        "functionId": 1,
                        "functionName": "indicator_tag_1",
                        "id": "4",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "indicator_tag": {
                                "description": "Tag an existing indicator record. Tags can be overwritten or appended.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Specifies the indicator which the tag will be added to. Supports a string indicator value or an indicator id.",
                                        "inputType": "item",
                                        "label": "indicator",
                                        "name": "indicator",
                                        "placeholder": "my_indicator",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Comma separated list of tags. Tags should only contain characters Aa-Zz, 0-9, '-', and '_'.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1,tag2,...,tagk",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional input. Either \"true\" or \"false\" with default as \"false\". If set to \"true\", existing tags on the indicator record will be replaced by the provided input. If set to \"false\", the new tags will be appended to the existing indicator tags.",
                                        "inputType": "item",
                                        "label": "overwrite",
                                        "name": "overwrite",
                                        "placeholder": "false",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "indicator_tag",
                                "name": "indicator_tag"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "indicator_tag": {
                                "indicator": "filtered-data:filter_1:condition_1:block_hash_1:action_result.parameter.hash",
                                "overwrite": "true",
                                "tags": "blocked"
                            }
                        }
                    },
                    "errors": {},
                    "id": "4",
                    "type": "utility",
                    "userCode": "\n",
                    "x": 980,
                    "y": 860
                },
                "6": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "playbook_input:hash",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "hash exists",
                                "logic": "and"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "filter_2",
                        "id": "6",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "filter",
                    "x": 1040,
                    "y": 300
                },
                "7": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "mark_evidence",
                            "repoName": "community"
                        },
                        "functionId": 2,
                        "functionName": "mark_evidence_2",
                        "id": "7",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "mark_evidence": {
                                "description": "Mark an object as Evidence in a container",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "Container ID or Container Object",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The object to mark as evidence. This could be a vault_id, artifact_id, note_id, container_id, or action_run_id. If the previous playbook block is an action then \"keyword_argument:results\" can be used for the action_run_id with the content_type \"action_run_id\". Vault_id can be an ID or a vault hash.",
                                        "inputType": "item",
                                        "label": "input_object",
                                        "name": "input_object",
                                        "placeholder": "artifact id, note id, vault_id, etc.",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The content type of the object to add as evidence which must be one of the following:\n            \n            vault_id\n            artifact_id\n            container_id\n            note_id\n            action_run_id",
                                        "inputType": "item",
                                        "label": "content_type",
                                        "name": "content_type",
                                        "placeholder": "See help text for supported types",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "mark_evidence",
                                "name": "mark_evidence"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "mark_evidence": {
                                "container": "container:id",
                                "content_type": "action_run_id",
                                "input_object": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "7",
                    "type": "utility",
                    "userCode": "\n    parameters = []\n\n    parameters.append({\n        \"container\": id_value,\n        \"input_object\": results,\n        \"content_type\": \"action_run_id\",\n    })\n\n",
                    "x": 980,
                    "y": 564.5
                }
            },
            "notes": ""
        },
        "input_spec": [
            {
                "contains": [
                    "hash"
                ],
                "description": "",
                "name": "hash"
            }
        ],
        "output_spec": null,
        "playbook_type": "data",
        "python_version": "3",
        "schema": "5.0.8",
        "version": "5.3.4.95226"
    },
    "create_time": "2023-08-02T06:12:49.427809+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": [
        "block",
        "risk_notable"
    ]
}